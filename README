[CS 631] Final Assignment - Write a Simple Shell (sish)
David Sevilla

Known Bugs:
- Redirection operators:
  - Don't work with whitespace separation. e.g. `echo foo > bar`
  - Don't work for multiple in one token. e.g. `echo foo>bar>baz`
  - However they do work in these cases:
    e.g. `echo foo >bar >baz >boing`, `cat <>boing`
- Pipelines not implemented in time
- Process backgrounding not implemented in time

Considerations:
- Extra arguments are ignored. Note that sh(1) has similar behavior when run
  with the -c option. For example, the following invocations ignore "foo":
  e.g. `sish foo`, `sish -x foo -c bar`, `sish -c bar foo`
- It is not ideal, but, I moved the execution of builtin commands to the child
  process to avoid complicated logic with file descriptor duplication, but
  these really shouldn't run in a separate process.
- While my code is short and fairly readable, I should consider moving parsing
  and execution logic to a separate file.

Additional tests considered:
sish$ something
  - Helpful error message
sish$ ^C
  - Prints newline and prompt string
sish$ yes
  - Follow by ^C to test whether prompt string is printed properly
    (requires changing signal handler behavior)
sish$ cat <file >file
  - Truncates file, similar to sh(1)
sish$ cat <>file
  - Doesn't truncate file, similar to sh(1)
sish$ echo foo >bar >baz >boing
  - Creates / truncates bar and baz files, and only writes "foo" to boing,
    similar to sh(1)
sish$ ^D
  - Write EOF to buffer, terminating the shell, like sh(1)
sish$ cat <<file >>>file
  - Yields a command parsing error, but still prints full command under tracing
    mode
sish$ exit foo >bar <baz
  - Exits with EXIT_FAILURE, similar to sh(1) (although the reason for doing
    so in sh(1) is because the builtin exit can take a number argument). Prints
    a helpful error message.
sish$ <varying whitespace>
  - Nothing happens, and nothing is written during tracing mode
